class BinaryTree:
	def __init__(self, size):
		self.customList = size * [None]
		self.lastUsedIndex = 0
		self.maxSize = size
	def insertNode(self, value):
		if self.lastUsedIndex + 1 == self.maxSize:
			return "The Binary Tree is full"
		self.customList[self.lastUsedIndex+1] = value
		self.lastUsedIndex += 1
		return "The value has been successfully inserted"
	def searchNode(self, nodeValue):
		for i in range(len(self.customList)):
			if self.customList[i] == nodeValue:
				return "is found"
		return "is not found"
	def inOrderTraversal(self, index):
		if index > self.lastUsedIndex:
			return 
		self.inOrderTraversal(index*2)
		print(self.customList[index])
		self.inOrderTraversal(index*2+1)
	def deleteNode(self, value):
		if self.lastUsedIndex == 0:
			return "There is not any node to delete"
		for i in range(1, self.lastUsedIndex+1):
			if self.customList[i] == value:
				self.customList[i] = self.customList[self.lastUsedIndex]
				self.customList[self.lastUsedIndex] = None
				self.lastUsedIndex -= 1
				return "has been successfully deleted"
newBT = BinaryTree(int(input("Enter the tree size: ")))
option='Y'
while (option=='Y' or option=='y'):
	sel=int(input("Enter 1 for Insertion\nEnter 2 for Deletion\nEnter 3 for search\nEnter 4 for Inorder traversal\n"))
	if (sel==1):
		print(newBT.insertNode(int(input("Enter node value: "))))
	elif (sel==2):
		dele=int(input("Enter node to delete: "))
		print(dele,newBT.deleteNode(dele))
	elif(sel==3):
		num=int(input("Enter node to search: "))
		print(num,newBT.searchNode(num))
	elif(sel==4):
		newBT.inOrderTraversal(1)
	else:
		print("Wrong option")
		continue
	option=str(input("do you want to do more operations(Y/N): "))